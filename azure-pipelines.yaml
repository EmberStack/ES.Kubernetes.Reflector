name: $(coreVersion).$(Date:yy)$(DayOfYear).$(Rev:r)

variables:
  coreVersion: 3

trigger:
  branches:
    include:
      - '*'
      
pool:
  vmImage: 'Ubuntu-16.04'

variables:
  buildConfiguration: 'Release'
  DOCKER_CLI_EXPERIMENTAL: 'enabled'

steps:
- script: |
   mkdir -p deploy/helm
   mkdir -p deploy/manual
  workingDirectory: '$(Build.ArtifactStagingDirectory)'
  displayName: 'Create Artifacts directories'
  
- task: HelmInstaller@0
  displayName: 'Install Helm'
  inputs:
    helmVersion: 2.13.1
    kubectlVersion: 1.10.11
    
- script: 'helm lint'
  workingDirectory: helm/reflector
  displayName: 'helm lint'
  
- task: HelmDeploy@0
  displayName: 'helm package'
  inputs:
    connectionType: None
    command: package
    chartPath: helm/reflector
    chartVersion: '$(Build.BuildNumber)'
    destination: '$(Build.ArtifactStagingDirectory)/deploy/helm'

- script: 'helm template --namespace kube-system --name reflector reflector > $(Build.ArtifactStagingDirectory)/deploy/manual/reflector-$(Build.BuildNumber).yaml'
  workingDirectory: helm
  displayName: 'helm template'

- task: Docker@2
  displayName: 'Build amd64 image'
  inputs:
    containerRegistry: 'Emberstack Docker Hub'
    repository: emberstack/es.kubernetes.reflector
    Dockerfile: ES.Kubernetes.Reflector/Dockerfile
    command: build
    buildContext: .
    tags: 'build-$(Build.BuildNumber)-amd64'
  
- task: Docker@2
  displayName: 'Build arm32 image'
  inputs:
    containerRegistry: 'Emberstack Docker Hub'
    repository: emberstack/es.kubernetes.reflector
    Dockerfile: ES.Kubernetes.Reflector/Dockerfile_arch
    buildContext: .
    command: build
    arguments: '--build-arg BASE_IMAGE=emberstack/es.kubernetes.reflector:build-$(Build.BuildNumber)-amd64 --build-arg FINAL_IMAGE=mcr.microsoft.com/dotnet/core/aspnet:2.2-stretch-slim-arm32v7'
    tags: 'build-$(Build.BuildNumber)-arm32'

- task: Docker@2
  displayName: 'Build arm64 image'
  inputs:
    containerRegistry: 'Emberstack Docker Hub'
    repository: emberstack/es.kubernetes.reflector
    Dockerfile: ES.Kubernetes.Reflector/Dockerfile_arch
    buildContext: .
    command: build
    arguments: '--build-arg BASE_IMAGE=emberstack/es.kubernetes.reflector:build-$(Build.BuildNumber)-amd64 --build-arg FINAL_IMAGE=mcr.microsoft.com/dotnet/core/aspnet:3.0-buster-slim-arm64v8'
    tags: 'build-$(Build.BuildNumber)-arm64'


- task: Docker@2
  displayName: 'Push images'
  inputs:
    containerRegistry: 'Emberstack Docker Hub'
    repository: emberstack/es.kubernetes.reflector
    command: push
    tags: |
     build-$(Build.BuildNumber)-amd64
     build-$(Build.BuildNumber)-arm32
     build-$(Build.BuildNumber)-arm64
    
- task: Docker@2
  displayName: 'Docker Hub login'
  inputs:
    containerRegistry: 'Emberstack Docker Hub'
    command: login
    
- script: |
   docker manifest create emberstack/es.kubernetes.reflector:build-$(Build.BuildNumber) emberstack/es.kubernetes.reflector:build-$(Build.BuildNumber)-amd64 emberstack/es.kubernetes.reflector:build-$(Build.BuildNumber)-arm32 emberstack/es.kubernetes.reflector:build-$(Build.BuildNumber)-arm64
   docker manifest inspect emberstack/es.kubernetes.reflector:build-$(Build.BuildNumber)
   docker manifest push emberstack/es.kubernetes.reflector:build-$(Build.BuildNumber)
  displayName: 'Create and push multi-arch manifest'


- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: deploy-chart'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)/deploy/helm'
    ArtifactName: deploy-chart
    
- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: deploy-manual'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)/deploy/manual'
    ArtifactName: deploy-manual
